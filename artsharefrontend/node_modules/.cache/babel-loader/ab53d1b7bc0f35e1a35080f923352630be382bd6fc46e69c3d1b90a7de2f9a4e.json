{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matem\\\\Desktop\\\\artsharefrontend\\\\artshare-frontend\\\\src\\\\components\\\\GalleryPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../styles/GalleryPage.css\";\nimport Navbar from \"./Navbar\"; // Adjust the path if needed\nimport axios from \"axios\"; // Import axios for HTTP requests\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GalleryPage = () => {\n  _s();\n  const [selectedPainting, setSelectedPainting] = useState(null);\n  const [paintings, setPaintings] = useState([]);\n  const [userRatings, setUserRatings] = useState({});\n  const [comments, setComments] = useState([]);\n  const [error, setError] = useState(null);\n  const [paintingRatings, setPaintingRatings] = useState([]);\n  const [curentUser, setCurentUser] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const getCurrentUser = () => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      setCurentUser(decodedToken); // Returns the decoded user data\n      console.log(decodedToken.sub);\n    }\n    return null; // No token, user not authenticated\n  };\n  // Fetch paintings from the backend when the component mounts\n  useEffect(() => {\n    getCurrentUser();\n    const fetchPaintings = async () => {\n      const token = localStorage.getItem(\"token\"); // Get JWT token from localStorage\n\n      if (!token) {\n        setError(\"You must be logged in to view the paintings.\");\n        return;\n      }\n      try {\n        console.log(\"JWT Token:\", localStorage.getItem(\"token\"));\n        const response = await axios.get(\"http://localhost:8080/api/paintings\", {\n          headers: {\n            Authorization: `Bearer ${token}` // Send the token in the Authorization header\n          }\n        });\n        setPaintings(response.data); // Set the fetched paintings\n      } catch (error) {\n        // Handle errors more gracefully\n        if (error.response) {\n          // Error with response from the server (e.g., 401 Unauthorized)\n          setError(`Error: ${error.response.data || \"Could not fetch paintings\"}`);\n        } else if (error.request) {\n          // Error in making the request\n          setError(\"Network error. Please check your connection.\");\n        } else {\n          // Something else went wrong\n          setError(`Unexpected error: ${error.message}`);\n        }\n        console.error(error);\n      }\n    };\n    fetchPaintings();\n  }, []);\n  const handleSelectPainting = async painting => {\n    setSelectedPainting(painting);\n    setComments([]); // Clear previous comments\n    // Set up the comments for this painting (if needed)\n    try {\n      // Fetch comments for the selected painting\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.get(`http://localhost:8080/api/comments/painting/${painting.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include JWT token\n        }\n      });\n      setComments(response.data); // Set the fetched comments\n\n      const ratingsResponse = await axios.get(`http://localhost:8080/api/ratings/painting/${painting.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setPaintingRatings(ratingsResponse.data); // Update state with fetched ratings\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      setError(\"Failed to fetch comments.\");\n    }\n  };\n\n  // Handle submitting a new comment\n  const handleCommentSubmit = async () => {\n    if (!newComment.trim()) return; // Do nothing if the comment is empty\n\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(`http://localhost:8080/api/comments/${selectedPainting.id}/${curentUser.sub}`, {\n        content: newComment,\n        author: curentUser.sub\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include JWT token\n        }\n      });\n\n      // Add the new comment to the comments list\n      setComments([...comments, response.data]);\n      setNewComment(\"\"); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n      setError(\"Failed to submit comment.\");\n    }\n  };\n  const handleStarClick = rating => {\n    if (selectedPainting) {\n      const newRatings = {\n        ...userRatings,\n        [selectedPainting.id]: rating // Update the rating for the current painting\n      };\n      setUserRatings(newRatings);\n      const token = localStorage.getItem(\"token\");\n      // Send the rating to the backend with JWT token\n      axios.post(`http://localhost:8080/api/ratings/${selectedPainting.id}/${curentUser.sub}`,\n      // Corrected URL with backticks\n      {\n        score: rating // Pass the rating as the request body\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include JWT token in the header\n        }\n      }).then(response => {\n        console.log(\"Rating updated:\", response.data);\n        handleSelectPainting(selectedPainting);\n      }).catch(error => {\n        console.error(\"Error updating rating:\", error);\n        setError(\"Failed to update rating\");\n      });\n    }\n  };\n\n  // Calculate the average rating of the painting\n  const calculateAverageRating = ratings => {\n    if (!ratings || ratings.length === 0) return 0;\n    const totalRating = ratings.reduce((sum, rating) => sum + rating.score, 0);\n    const average = totalRating / ratings.length;\n    return Math.round(average); // Round to the nearest integer\n  };\n  const getUserRating = ratings => {\n    if (!ratings || ratings.length === 0) return 0;\n    const userRating = ratings.find(rating => rating.user === curentUser.sub);\n    return userRating ? parseInt(userRating.score) : 0;\n  };\n\n  // Get the average rating for the selected painting\n  const currentRating = selectedPainting ? calculateAverageRating(paintingRatings) // Calculate the average rating\n  : 0; // Default to 0 if no selected painting\n\n  const userRating = selectedPainting ? getUserRating(paintingRatings) : 0;\n  console.log(\"asd\" + userRating);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-page\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"painting-list\",\n        children: paintings.map(painting => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"painting-item\",\n          onClick: () => handleSelectPainting(painting),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"painting-box\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/jpeg;base64,${painting.image}`,\n              style: {\n                maxWidth: \"100%\",\n                maxHeight: \"400px\",\n                objectFit: \"contain\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: painting.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: painting.painter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stars\",\n              children: [\"★\".repeat(painting.stars), \"☆\".repeat(5 - painting.stars)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, painting.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"painting-details\",\n        children: selectedPainting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: selectedPainting.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"by: \", selectedPainting.painter]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), selectedPainting.image && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"painting-display\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/jpeg;base64,${selectedPainting.image}`,\n              style: {\n                maxWidth: \"100%\",\n                maxHeight: \"400px\",\n                objectFit: \"contain\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this), \"Avrage rating:\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stars\",\n            children: [\"★\".repeat(currentRating), \"☆\".repeat(5 - currentRating)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this), \"My rating:\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stars mt-2\",\n            children: [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => handleStarClick(star) // Set rating on click\n              ,\n              style: {\n                cursor: \"pointer\",\n                color: star <= userRating ? \"gold\" : \"gray\",\n                // Highlight stars based on user rating\n                fontSize: \"1.5rem\"\n              },\n              children: \"\\u2605\"\n            }, star, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: newComment,\n              onChange: e => setNewComment(e.target.value),\n              placeholder: \"Write a comment...\",\n              rows: \"3\",\n              style: {\n                width: \"100%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mt-2\",\n              onClick: handleCommentSubmit,\n              children: \"Submit Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mt-3\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments-section\",\n            children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [comment.content, \" by: \", comment.author]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 21\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No comments yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a painting to see details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(GalleryPage, \"ooc47mWvXQRTWTzyvqm0DlUbn+s=\");\n_c = GalleryPage;\nexport default GalleryPage;\nvar _c;\n$RefreshReg$(_c, \"GalleryPage\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","axios","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","GalleryPage","_s","selectedPainting","setSelectedPainting","paintings","setPaintings","userRatings","setUserRatings","comments","setComments","error","setError","paintingRatings","setPaintingRatings","curentUser","setCurentUser","newComment","setNewComment","getCurrentUser","token","localStorage","getItem","decodedToken","console","log","sub","fetchPaintings","response","get","headers","Authorization","data","request","message","handleSelectPainting","painting","id","ratingsResponse","handleCommentSubmit","trim","post","content","author","handleStarClick","rating","newRatings","score","then","catch","calculateAverageRating","ratings","length","totalRating","reduce","sum","average","Math","round","getUserRating","userRating","find","user","parseInt","currentRating","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","image","style","maxWidth","maxHeight","objectFit","title","painter","repeat","stars","star","cursor","color","fontSize","value","onChange","e","target","placeholder","rows","width","comment","_c","$RefreshReg$"],"sources":["C:/Users/matem/Desktop/artsharefrontend/artshare-frontend/src/components/GalleryPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../styles/GalleryPage.css\";\r\nimport Navbar from \"./Navbar\"; // Adjust the path if needed\r\nimport axios from \"axios\"; // Import axios for HTTP requests\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nconst GalleryPage = () => {\r\n  const [selectedPainting, setSelectedPainting] = useState(null);\r\n  const [paintings, setPaintings] = useState([]);\r\n  const [userRatings, setUserRatings] = useState({});\r\n  const [comments, setComments] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [paintingRatings, setPaintingRatings] = useState([]);\r\n  const [curentUser, setCurentUser] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n\r\n  const getCurrentUser = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const decodedToken = jwtDecode(token);\r\n      setCurentUser(decodedToken); // Returns the decoded user data\r\n      console.log(decodedToken.sub);\r\n    }\r\n    return null; // No token, user not authenticated\r\n  };\r\n  // Fetch paintings from the backend when the component mounts\r\n  useEffect(() => {\r\n    getCurrentUser();\r\n    const fetchPaintings = async () => {\r\n      const token = localStorage.getItem(\"token\"); // Get JWT token from localStorage\r\n\r\n      if (!token) {\r\n        setError(\"You must be logged in to view the paintings.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        console.log(\"JWT Token:\", localStorage.getItem(\"token\"));\r\n        const response = await axios.get(\r\n          \"http://localhost:8080/api/paintings\",\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`, // Send the token in the Authorization header\r\n            },\r\n          }\r\n        );\r\n        setPaintings(response.data); // Set the fetched paintings\r\n      } catch (error) {\r\n        // Handle errors more gracefully\r\n        if (error.response) {\r\n          // Error with response from the server (e.g., 401 Unauthorized)\r\n          setError(\r\n            `Error: ${error.response.data || \"Could not fetch paintings\"}`\r\n          );\r\n        } else if (error.request) {\r\n          // Error in making the request\r\n          setError(\"Network error. Please check your connection.\");\r\n        } else {\r\n          // Something else went wrong\r\n          setError(`Unexpected error: ${error.message}`);\r\n        }\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchPaintings();\r\n  }, []);\r\n\r\n  const handleSelectPainting = async (painting) => {\r\n    setSelectedPainting(painting);\r\n    setComments([]); // Clear previous comments\r\n    // Set up the comments for this painting (if needed)\r\n    try {\r\n      // Fetch comments for the selected painting\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.get(\r\n        `http://localhost:8080/api/comments/painting/${painting.id}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`, // Include JWT token\r\n          },\r\n        }\r\n      );\r\n      setComments(response.data); // Set the fetched comments\r\n\r\n      const ratingsResponse = await axios.get(\r\n        `http://localhost:8080/api/ratings/painting/${painting.id}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      setPaintingRatings(ratingsResponse.data); // Update state with fetched ratings\r\n    } catch (error) {\r\n      console.error(\"Error fetching comments:\", error);\r\n      setError(\"Failed to fetch comments.\");\r\n    }\r\n  };\r\n\r\n  // Handle submitting a new comment\r\n  const handleCommentSubmit = async () => {\r\n    if (!newComment.trim()) return; // Do nothing if the comment is empty\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.post(\r\n        `http://localhost:8080/api/comments/${selectedPainting.id}/${curentUser.sub}`,\r\n        {\r\n          content: newComment,\r\n          author: curentUser.sub,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`, // Include JWT token\r\n          },\r\n        }\r\n      );\r\n\r\n      // Add the new comment to the comments list\r\n      setComments([...comments, response.data]);\r\n      setNewComment(\"\"); // Clear the input field after submission\r\n    } catch (error) {\r\n      console.error(\"Error submitting comment:\", error);\r\n      setError(\"Failed to submit comment.\");\r\n    }\r\n  };\r\n\r\n  const handleStarClick = (rating) => {\r\n    if (selectedPainting) {\r\n      const newRatings = {\r\n        ...userRatings,\r\n        [selectedPainting.id]: rating, // Update the rating for the current painting\r\n      };\r\n      setUserRatings(newRatings);\r\n      const token = localStorage.getItem(\"token\");\r\n      // Send the rating to the backend with JWT token\r\n      axios\r\n        .post(\r\n          `http://localhost:8080/api/ratings/${selectedPainting.id}/${curentUser.sub}`, // Corrected URL with backticks\r\n          {\r\n            score: rating, // Pass the rating as the request body\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`, // Include JWT token in the header\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(\"Rating updated:\", response.data);\r\n          handleSelectPainting(selectedPainting);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error updating rating:\", error);\r\n          setError(\"Failed to update rating\");\r\n        });\r\n    }\r\n  };\r\n\r\n  // Calculate the average rating of the painting\r\n  const calculateAverageRating = (ratings) => {\r\n    if (!ratings || ratings.length === 0) return 0;\r\n    const totalRating = ratings.reduce((sum, rating) => sum + rating.score, 0);\r\n    const average = totalRating / ratings.length;\r\n    return Math.round(average); // Round to the nearest integer\r\n  };\r\n\r\n  const getUserRating = (ratings) => {\r\n    if (!ratings || ratings.length === 0) return 0;\r\n\r\n    const userRating = ratings.find((rating) => rating.user === curentUser.sub);\r\n    return userRating ? parseInt(userRating.score) : 0;\r\n  };\r\n\r\n  // Get the average rating for the selected painting\r\n  const currentRating = selectedPainting\r\n    ? calculateAverageRating(paintingRatings) // Calculate the average rating\r\n    : 0; // Default to 0 if no selected painting\r\n\r\n  const userRating = selectedPainting ? getUserRating(paintingRatings) : 0;\r\n  console.log(\"asd\" + userRating);\r\n  return (\r\n    <div className=\"gallery-page\">\r\n      <Navbar />\r\n      {error && <p className=\"error\">{error}</p>} {/* Display error if any */}\r\n      <div className=\"content d-flex\">\r\n        {/* Left Scrollable Paintings Panel */}\r\n        <div className=\"painting-list\">\r\n          {paintings.map((painting) => (\r\n            <div\r\n              key={painting.id}\r\n              className=\"painting-item\"\r\n              onClick={() => handleSelectPainting(painting)}\r\n            >\r\n              <div className=\"painting-box\">\r\n                <img\r\n                  src={`data:image/jpeg;base64,${painting.image}`}\r\n                  style={{\r\n                    maxWidth: \"100%\",\r\n                    maxHeight: \"400px\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <h5>{painting.title}</h5>\r\n                <p>{painting.painter}</p>\r\n                <div className=\"stars\">\r\n                  {\"★\".repeat(painting.stars)}\r\n                  {\"☆\".repeat(5 - painting.stars)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Main Painting Details Section */}\r\n        <div className=\"painting-details\">\r\n          {selectedPainting ? (\r\n            <>\r\n              <h3>{selectedPainting.title}</h3>\r\n              <p>by: {selectedPainting.painter}</p>\r\n              {/* Conditionally render the painting image */}\r\n              {selectedPainting.image && (\r\n                <div className=\"painting-display\">\r\n                  <img\r\n                    src={`data:image/jpeg;base64,${selectedPainting.image}`}\r\n                    style={{\r\n                      maxWidth: \"100%\",\r\n                      maxHeight: \"400px\",\r\n                      objectFit: \"contain\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              )}\r\n              Avrage rating:\r\n              <div className=\"stars\">\r\n                {\"★\".repeat(currentRating)}\r\n                {\"☆\".repeat(5 - currentRating)}\r\n              </div>\r\n              {/* Interactive Stars */}\r\n              My rating:\r\n              <div className=\"stars mt-2\">\r\n                {[1, 2, 3, 4, 5].map((star) => (\r\n                  <span\r\n                    key={star}\r\n                    onClick={() => handleStarClick(star)} // Set rating on click\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      color: star <= userRating ? \"gold\" : \"gray\", // Highlight stars based on user rating\r\n                      fontSize: \"1.5rem\",\r\n                    }}\r\n                  >\r\n                    ★\r\n                  </span>\r\n                ))}\r\n              </div>\r\n              {/* Add Comment */}\r\n              <div className=\"mt-3\">\r\n                <textarea\r\n                  value={newComment}\r\n                  onChange={(e) => setNewComment(e.target.value)}\r\n                  placeholder=\"Write a comment...\"\r\n                  rows=\"3\"\r\n                  style={{ width: \"100%\" }}\r\n                />\r\n                <button\r\n                  className=\"btn btn-primary mt-2\"\r\n                  onClick={handleCommentSubmit}\r\n                >\r\n                  Submit Comment\r\n                </button>\r\n              </div>\r\n              <h5 className=\"mt-3\">Comments</h5>\r\n              <div className=\"comments-section\">\r\n                {comments.length > 0 ? (\r\n                  comments.map((comment) => (\r\n                    <p>\r\n                      {comment.content} by: {comment.author}\r\n                    </p>\r\n                  ))\r\n                ) : (\r\n                  <p>No comments yet.</p>\r\n                )}\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <h3>Select a painting to see details</h3>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GalleryPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}